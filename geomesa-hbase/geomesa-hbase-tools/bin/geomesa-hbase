#! /usr/bin/env bash
#
# Copyright (c) 2013-%%copyright.year%% Commonwealth Computer Research, Inc.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0 which
# accompanies this distribution and is available at
# http://www.opensource.org/licenses/apache2.0.php.
#

# set environment variables in conf/geomesa-env.sh, dependencies in .dependencies

# configure HOME and CONF_DIR, then load geomesa-env.sh
export %%gmtools.dist.name%%_HOME="${%%gmtools.dist.name%%_HOME:-$(cd "`dirname "$0"`"/..; pwd)}"
export GEOMESA_CONF_DIR="${GEOMESA_CONF_DIR:-$%%gmtools.dist.name%%_HOME/conf}"

if [[ -f "${GEOMESA_CONF_DIR}/geomesa-env.sh" ]]; then
  . "${GEOMESA_CONF_DIR}/geomesa-env.sh"
else
  echo >&2 "ERROR: could not read '${GEOMESA_CONF_DIR}/geomesa-env.sh', aborting script"
  exit 1
fi

if  [[ $1 = configure ]]; then
  geomesa_configure
  exit
fi

# setup the classpath
function get_classpath() {
  if [[ -n "$GEOMESA_CLASSPATH" ]]; then
    echo "$GEOMESA_CLASSPATH"
  else
    local classpath="$(get_base_classpath)"
    if [[ -f "${GEOMESA_CONF_DIR}/hbase-env.sh" ]]; then
      . "${GEOMESA_CONF_DIR}/hbase-env.sh"
      local hbase_cp_with_logging="$(get_hbase_classpath)"
      classpath="$classpath:$(remove_slf4j_from_classpath $hbase_cp_with_logging)"
    fi
    if [[ -f "${GEOMESA_CONF_DIR}/hadoop-env.sh" ]]; then
      . "${GEOMESA_CONF_DIR}/hadoop-env.sh"
      local hadoop_cp_with_logging="$(get_hadoop_classpath)"
      classpath="$classpath:$(remove_slf4j_from_classpath $hadoop_cp_with_logging)"
    fi
    classpath="$(fix_classpath_format $classpath)"
    echo "$classpath"
  fi
}

RUNNER="org.locationtech.geomesa.hbase.tools.HBaseRunner"
CLASSPATH="$(get_classpath)"

# set java process options - do this after set classpath b/c that can modify JAVA_LIBRARY_PATH
if [[ $1 = debug ]]; then
  GEOMESA_OPTS="$(get_options "debug")"
  shift 1
else
  GEOMESA_OPTS="$(get_options)"
fi

if [[ $1 = classpath ]]; then
  echo $CLASSPATH | tr ':' '\n' | sort
elif [[ $1 = scala-console ]]; then
  shift 1
  # scala console requires options to be passed in through java_opts
  export JAVA_OPTS="${GEOMESA_OPTS}"
  geomesa_scala_console ${CLASSPATH} "$@"
else
  # load and check required dependencies - skip if classpath is explicitly set
  if [[ -z "$GEOMESA_CLASSPATH" && "$GEOMESA_CHECK_DEPENDENCIES" = "true" && -f "${GEOMESA_CONF_DIR}/dependencies.sh" ]]; then
    . "${GEOMESA_CONF_DIR}/dependencies.sh"
    includes="$(dependencies $CLASSPATH)"
    # TODO check for --no-prompt in args and pass along
    check_classpath "$GEOMESA_LIB" "$CLASSPATH" "$includes"
    RET=$?
    if [[ $RET -eq 1 ]]; then
      # downloaded new jars - re-load the classpath to pick them up
      CLASSPATH="$(get_classpath)"
    elif [[ $RET -ne 0 ]]; then
       # error or cancelled
      exit $RET
    fi
  fi

  # invoke the main java process
  java ${GEOMESA_OPTS} -cp ${CLASSPATH} $RUNNER "$@"
fi
